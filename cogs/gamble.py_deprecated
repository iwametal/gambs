import asyncio
import discord

from discord.ext import commands


### GAMBLE CHANNELS ###
# staff_command_channel = 1234365497181601813
gamble_channels = {
	'ft1': [1233844891042447411],
	'rand': [1233844920280944771, 1258232843558060052]
}

rand_stats = {
	'stat_list': ['HP', 'Attack', 'Defense', 'Sp. Atk', 'Sp. Def', 'Speed', 'Total', 'Height', 'Weight'],
	'stat_data': ['hp', 'attack', 'defense', 'special-attack', 'special-defense', 'speed', 'total', 'height', 'weight'],
	'selected_stat': {
		'index': [],
		'channel': []
	}
}

class Gamble(commands.Cog):

	def __init__(self, bot):
		self.bot = bot


	"""DEX POKÉMON COMMANDS
	"""
	@commands.command()
	async def show_pokemon(self, ctx, dex_number: int):
		index = -1
		bold_stat = [''] * 9
		stat_list = rand_stats['stat_list'].copy()
		data_list = []

		if ctx.channel.id in rand_stats['selected_stat']['channel']:
			index = rand_stats['selected_stat']['index'][rand_stats['selected_stat']['channel'].index(ctx.channel.id)]
		
		if index != -1:
			bold_stat[index] = "**"
			stat_list[index] = stat_list[index].upper()

		data = next((p for p in self.bot.pokemon_data if p['dex_number'] == dex_number), None)
		if not data:
			await ctx.channel.send(f"Pokémon with Dex number {dex_number} not found.")
			return

		# embed = discord.Embed(title=f"#{data['dex_number']} — {data['name'].capitalize()}", description=data['description'].replace("\n", " ").replace("\f", " "), color=discord.Color.blue())
		embed = discord.Embed(title=f"#{data['dex_number']} — {data['name'].capitalize()}", color=discord.Color.blue())
		
		# if 'evolution_chain' in data:
		# 	embed.add_field(name="Evolution", value=" -> ".join(data['evolution_chain']).capitalize(), inline=False)
		
		# if 'types' in data:
		# 	types = ", ".join(data['types']).capitalize()
		# 	embed.add_field(name="Types", value=types, inline=True)
		
		# if 'region' in data:
		# 	embed.add_field(name="Region", value=data['region'].capitalize(), inline=True)
		
		# embed.add_field(name="Catchable", value="Yes", inline=True)
		
		if 'base_stats' in data:
			base_stats = data['base_stats']
			stats = ''
			for i in range(0, 6):
				data_list.append(base_stats.get(rand_stats['stat_data'][i], 'N/A'))
				stats += f"{bold_stat[i]}{stat_list[i]}: {data_list[-1]}{bold_stat[i]}\n"
			
			data_list.append(sum(base_stats.values()))
			stats += f"{bold_stat[6]}{stat_list[6]}: {data_list[-1]}{bold_stat[6]}\n"
			# stats = (
			# 	f"**HP**: {base_stats.get('hp', 'N/A')}\n"
			# 	f"**Attack**: {base_stats.get('attack', 'N/A')}\n"
			# 	f"**Defense**: {base_stats.get('defense', 'N/A')}\n"
			# 	f"**Sp. Atk**: {base_stats.get('special-attack', 'N/A')}\n"
			# 	f"**Sp. Def**: {base_stats.get('special-defense', 'N/A')}\n"
			# 	f"**Speed**: {base_stats.get('speed', 'N/A')}\n"
			# 	f"**Total**: {sum(base_stats.values())}"
			# )
			embed.add_field(name="Base Stats", value=stats, inline=True)
		
		# if 'other_lang_names' in data:
		# 	names = data['other_lang_names']
		# 	names_str = (
		# 		f":flag_jp: {names.get('ja-Hrkt', 'N/A')}\n"
		# 		f":flag_jp: {names.get('roomaji', 'N/A')}\n"
		# 		f":flag_kr: {names.get('ko', 'N/A')}\n"
		# 		f":flag_cn: {names.get('zh-Hant', 'N/A')}\n"
		# 		f":flag_fr: {names.get('fr', 'N/A')}\n"
		# 		f":flag_de: {names.get('de', 'N/A')}\n"
		# 		f":flag_es: {names.get('es', 'N/A')}\n"
		# 		f":flag_it: {names.get('it', 'N/A')}\n"
		# 		f":flag_us: {names.get('en', 'N/A')}"
		# 	)
		# 	embed.add_field(name="Names", value=names_str, inline=True)
		
		if 'appearance_info' in data:
			appearance = data['appearance_info']
			data_list.append(appearance.get(rand_stats['stat_data'][7], 0) / 10)
			data_list.append(appearance.get(rand_stats['stat_data'][8], 0) / 10)
			appearance_str = "{}{}: {} m{}\n{}{}: {} kg{}".format(
				bold_stat[7],
				stat_list[7],
				data_list[-2],
				bold_stat[7],
				bold_stat[8],
				stat_list[8],
				data_list[-1],
				bold_stat[8],
			)
			# appearance_str = f"**Height**: {appearance.get('height', 0) / 10} m\n**Weight**: {appearance.get('weight', 0) / 10} kg"
			embed.add_field(name="Appearance", value=appearance_str, inline=True)
		
		# if 'gender_ratio' in data:
		# 	gender_ratio = data['gender_ratio']
		# 	gender_ratio_str = f"Male: {gender_ratio.get('male', 0) / 8 * 100}%\nFemale: {gender_ratio.get('female', 0) / 8 * 100}%"
		# 	embed.add_field(name="Gender Ratio", value=gender_ratio_str, inline=True)
		
		if 'official_artwork_url' in data:
			embed.set_image(url=data['official_artwork_url'])
		
		await ctx.channel.send(embed=embed)
		if index > -1:
			stat_embed = discord.Embed(title=f"{ctx.author.name} Got {data_list[index]}!", color=0x000000)
			await ctx.channel.send(embed=stat_embed)


	"""Check roll type for command
	"""
	@commands.command()
	async def check_roll(self, message):
		# Dictionary to map commands to bot IDs

		bot_id_mapping = {
			'+': {'bot_id': 1233876149931737220},
			'>': {'bot_id': 204255221017214977},
			'n!': {'bot_id': 854233015475109888},
			'!': {'bot_id': 235148962103951360}
		}

		message_part = message.content.lower().strip().split('roll')

		for index in range (0, len(message_part)):
			message_part[index] = message_part[index].strip()

		if len(message_part) == 1:
			message_part.append(None)
		else:
			try:
				message_part[1] = message_part[1].strip().split(' ')[0]
				if 'd' in message_part[1]:
					message_part[1] = message_part[1].split('d')[1].strip()
			except:
				return None, None
		
		prefix = next((p for p in bot_id_mapping if message_part[0] == p), None)
		if prefix:
			bot_id = bot_id_mapping[prefix]['bot_id']

			def check(m):
				return m.author.id == bot_id and m.channel == message.channel and (prefix != '>roll 1024' or m.content)

			try:
				next_message = None
				if not prefix == '+':
					next_message = await self.bot.wait_for('message', check=check, timeout=60.0)
					# print("[debug] Message found from bot:", next_message.author, next_message.author.id)
					# print("[debug] Next message content:", next_message.content)
					# print("[debug] Next message embeds:", next_message.embeds)
					# print("[debug] Full next message object:", next_message)

				else:
					import time
					# ctx = await self.bot.get_context(message)
					# await ctx.invoke(self.roll, int(message_part[1]) if message_part[1] else 100)
					time_limit = 10

					start_time = time.time()
					while ((time.time() - start_time) < time_limit and not next_message):
						channel = message.channel
						
						async for msg in channel.history(limit=2):
							if msg.author == self.bot.user:
								if msg.embeds and msg.embeds[0].description and 'rolled a' in msg.embeds[0].description:
									next_message = msg
								break
						time.sleep(0.1)

				roll_number = None
				if 'n!' == prefix:
					try:
						embed = next_message.embeds[0]
						description = embed.description
						if description:
							roll_number = description.split(' rolled a ')[1].split('**')[1]
							roll_number = int(roll_number)
					except (ValueError, IndexError, AttributeError) as e:
						print(f'[debug] Failed to extract Dex number for n!roll: {e}')
						return None, None

				elif '!' == prefix:
					try:
						embed = next_message.embeds[0]
						title = embed.title
						if title:
							roll_number = title.split('rolls')[1].split('**')[1]
							roll_number = int(roll_number)
					except (ValueError, IndexError, AttributeError) as e:
						print(f'[debug] Failed to extract Dex number for !roll: {e}')
						return None, None

				elif '>' == prefix:
					try:
						roll_number = next_message.content.split()[1]
						roll_number = int(roll_number)
					except (ValueError, IndexError) as e:
						print(f'[debug] Failed to extract Dex number for >roll: {e}')
						return None, None

				elif '+' == prefix:
					try:
						embed = next_message.embeds[0]
						description = embed.description
						if description:
							roll_number = description.split(' rolled a ')[1].split('!')[0]
							roll_number = int(roll_number)
					except (ValueError, IndexError, AttributeError) as e:
						print(f'[debug] Failed to extract Dex number for +roll: {e}')
						return None, None

				rand_roll_list = ['6', '7', '9']
				if message.channel.id in gamble_channels['rand'] and message_part[1] == '1025':
					return roll_number, 'rand'
				
				elif message.channel.id in gamble_channels['rand'] and message_part[1] in rand_roll_list:
					return roll_number, 'stat'

				elif message.channel.id in gamble_channels['ft1']:
					return roll_number, 'ft1'
			except asyncio.TimeoutError:
				print("[debug] Timed out waiting for the next message.")
				return None, None

		return None, None


	"""ON MESSAGE EVENT LISTENER
	"""
	@commands.Cog.listener()
	async def on_message(self, message):
		if any(message.channel.id in channel for channel in gamble_channels.values()):
			roll_number, gamble_type = await self.check_roll(message)

			if roll_number and gamble_type:
				if gamble_type == 'rand':
					await self.show_pokemon(message, roll_number)

				elif gamble_type == 'stat':

					if message.channel.id in rand_stats['selected_stat']['channel']:
						rand_stats['selected_stat']['index'][rand_stats['selected_stat']['channel'].index(message.channel.id)] = roll_number - 1
					else:
						rand_stats['selected_stat']['index'].append(roll_number - 1)
						rand_stats['selected_stat']['channel'].append(message.channel.id)

					embed = discord.Embed(title="Stat Rolled", description=f"Stat rolled was **{rand_stats['stat_list'][roll_number-1]}!**")
					await message.channel.send(embed=embed)

				elif gamble_type == 'ft1' and roll_number == 1:
					embed = discord.Embed(title="FT1 WINNER!", description=f"**Congrats {message.author.mention}!** You won the gamble!")
					await message.channel.send(embed=embed)
	
	@commands.command(name='set_rand_stat', aliases=['setrs'], help='Set the stats for the random stats command.')
	async def set_rand_stat(self, ctx, *stat):
		if ctx.channel.id in gamble_channels['rand']:
			errors = False
			v_stats = ''
			for index in range(0, len(rand_stats['stat_list'])):
				v_stats += f"- **{index+1} ・ {rand_stats['stat_list'][index]}**\n"

			try:
				stat = int(stat)

				if stat < 1 or stat > len(rand_stats['stat_list']):
					errors = True
					embed = discord.Embed(
						title="Invalid Stat Provided",
						description=f"**Please enter a valid stat. (either number or name):**\n\n{v_stats}",
					)
					embed.set_footer(text="Want a random stat for you? Roll a number of 6, 7, or 9!")

					await ctx.send(embed=embed)
			except:
				stat = ''.join(stat)
				valid_stat = False

				for index in range(0, len(rand_stats['stat_list'])):
					rs = ''.join(s.strip() for s in rand_stats['stat_list'][index].lower().split(' '))

					if stat == rs:
						valid_stat = True
						stat = index + 1
						break
				
				if not valid_stat:
					errors = True
					embed = discord.Embed(
						title="Invalid Stat Provided",
						description=f"**Please enter a valid stat. (either number or name):**\n\n{v_stats}",
					)
					embed.set_footer(text="Want a random stat for you? Roll a number of 6, 7, or 9!")

					await ctx.send(embed=embed)
				
			if not errors:
				if ctx.channel.id in rand_stats['selected_stat']['channel']:
					rand_stats['selected_stat']['index'][rand_stats['selected_stat']['channel'].index(ctx.channel.id)] = stat-1
				else:
					rand_stats['selected_stat']['index'].append(stat-1)
					rand_stats['selected_stat']['channel'].append(ctx.channel.id)

				embed = discord.Embed(title="Rand Stat Set", description=f"Status set to **{rand_stats['stat_list'][stat-1]}!**")
				await ctx.send(embed=embed)


	@commands.command(name='rand_test', help='Roll a number between 1 and the specified number.')
	@commands.has_permissions(administrator=True)
	async def rand_test(self, ctx, num):
		try:
			num = int(num)
			await self.show_pokemon(ctx, num)
		except ValueError:
			await ctx.send("Please enter a valid number.")
			return


	"""ROLL COMMAND
	"""
	@commands.command(name='roll', help='Roll a number between 1 and the specified number.')
	async def roll(self, ctx, num: int = 100):
		import random

		rollnum = random.randint(1, num)
		user = ctx.author.mention
		embed = discord.Embed(
			title="",
			description=f"{user} rolled a {rollnum}!",
			color=discord.Color.blue()
		)
		await ctx.send(embed=embed)

		if self.bot.EVENT_ROLL["event_active"] and ctx.channel.id in self.bot.EVENT_ROLL["event_channels"]:
			if rollnum == self.bot.EVENT_ROLL.get("roll_number") and num == self.bot.EVENT_ROLL.get("roll_max"):
				embed = discord.Embed(
					title="Event Roll Winner!",
					description=f"Congratulations **{user}**!! You have won the event!!",
					color = discord.Color.purple()
				)
				await ctx.send(embed=embed)

				self.bot.EVENT_ROLL["event_active"] = False
				self.bot.EVENT_ROLL.pop("roll_number", None)
				self.bot.EVENT_ROLL.pop("roll_max", None)

				try:
					guild_manager_cog = self.bot.get_cog('GuildManager')
					if guild_manager_cog:
						channel = ctx.channel
						
						overwrite = discord.PermissionOverwrite()
						overwrite.send_messages = False
						overwrite.add_reactions = False

						await channel.set_permissions(ctx.guild.default_role, overwrite=overwrite)
						await ctx.send(f'Channel {channel.name} has been locked!')
					else:
						print("Generic Cog is not loaded.")
				except Exception as e:
					print(e)


	@commands.command(name='coinflip', aliases=['cf'])
	async def coinflip(self, ctx, timer: int = 1):
		import random
		import time

		coin_flip = {
			'heads': 'https://i.imgur.com/h1Os447.png',
			'tails': 'https://i.imgur.com/EiBLhPX.png'
		}

		res = random.choice(list(coin_flip.keys()))

		""" Flips a coin """
		flipping = discord.Embed(title="A coin has been flipped...", description="The coin is flying...",
		colour=0x00b8f5)
		flipping.set_image(url="https://i.imgur.com/nULLx1x.gif")
		msg = await ctx.send(embed=flipping)

		time.sleep(timer)

		embed = discord.Embed(title="A coin has been flipped...", description=f"The coin landed on **{res}**!",
						colour=0x00b8f5)
		embed.set_image(url=coin_flip[res])
		await msg.edit(embed=embed)


async def setup(bot):
	await bot.add_cog(Gamble(bot))